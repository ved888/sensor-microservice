definitions:
  model.EditSensorsRequest:
    properties:
      value:
        type: number
    type: object
  model.ErrorResponse:
    properties:
      code:
        type: integer
      details:
        type: string
      error:
        type: string
    type: object
  model.Login:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  model.LoginResponse:
    properties:
      token:
        type: string
    type: object
  model.SignupRequest:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
      role:
        type: string
    type: object
  model.SignupResponse:
    properties:
      message:
        type: string
    type: object
host: localhost:8081
info:
  contact: {}
  description: This is the API documentation for Microservice B (Data Receiver / API
    Service)
  title: sensor-microservice-b
  version: "1.0"
paths:
  /api/sensors:
    delete:
      consumes:
      - application/json
      description: 'This endpoint deletes sensor readings from the database.You can
        filter records by `id1`, `id2`, or by a time range (`from`, `to`).You can
        also combine filters (e.g., ID1 + time range).Time parameters must be in RFC3339
        format (UTC).Example: `2025-09-06T15:04:05Z`If no filters are provided, **no
        rows will be deleted**.'
      parameters:
      - description: Filter by ID1 (string identifier)
        example: '"A"'
        in: query
        name: id1
        type: string
      - description: Filter by ID2 (integer identifier)
        example: 1
        in: query
        name: id2
        type: integer
      - description: Filter from timestamp (RFC3339 format)
        example: '"2025-09-06T10:00:00Z"'
        in: query
        name: from
        type: string
      - description: Filter to timestamp (RFC3339 format)
        example: '"2025-09-06T12:00:00Z"'
        in: query
        name: to
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'Number of deleted rows, e.g. {\"deleted\": 3}'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: 'Internal server error, e.g. {\"error\": \"database failure\"}'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete sensor readings with filters
      tags:
      - MicroserviceB
    get:
      consumes:
      - application/json
      description: 'This endpoint retrieves sensor readings from the database.You
        can filter results by `id1`, `id2`, or by a time range (`from`, `to`).You
        can also combine filters (e.g., ID1 + time range).Pagination is supported
        via `page` and `limit` query parameters.- `page`: Page number starting from
        1- `limit`: Number of records per page (default: 10) Time parameters must
        be in RFC3339 format (UTC). Example: `2025-09-06T15:04:05Z`'
      parameters:
      - description: Filter by ID1 (string identifier)
        example: '"A"'
        in: query
        name: id1
        type: string
      - description: Filter by ID2 (integer identifier)
        example: 1
        in: query
        name: id2
        type: integer
      - description: Filter from timestamp (RFC3339 format)
        example: '"2025-09-06T10:00:00Z"'
        in: query
        name: from
        type: string
      - description: Filter to timestamp (RFC3339 format)
        example: '"2025-09-06T12:00:00Z"'
        in: query
        name: to
        type: string
      - default: 1
        description: Page number (starting from 1)
        example: 1
        in: query
        name: page
        type: integer
      - default: 10
        description: Page size (number of records per page)
        example: 10
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Paginated sensor readings with metadata
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Retrieve sensor readings with filters
      tags:
      - MicroserviceB
    patch:
      consumes:
      - application/json
      description: 'This endpoint allows updating sensor values based on optional
        filters such as `id1`, `id2`, and a time range (`from`, `to`).If no filters
        are provided, no rows will be updated.Time parameters should be provided in
        RFC3339 format (UTC).Example time format: `2025-09-06T15:04:05Z`'
      parameters:
      - description: Filter by ID1 (string identifier)
        example: '"A"'
        in: query
        name: id1
        type: string
      - description: Filter by ID2 (integer identifier)
        example: "1"
        in: query
        name: id2
        type: string
      - description: Start timestamp in RFC3339 format (e.g., 2025-09-06T10:00:00Z)
        in: query
        name: from
        type: string
      - description: End timestamp in RFC3339 format (e.g., 2025-09-06T12:00:00Z)
        in: query
        name: to
        type: string
      - description: Sensor update request payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/model.EditSensorsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 'Number of updated rows, e.g. {\"updated\": 5}'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Invalid request body, e.g. {\"error\": \"invalid body\"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'Internal server error, e.g. {\"error\": \"database failure\"}'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update sensor readings values with filters
      tags:
      - MicroserviceB
  /login:
    post:
      consumes:
      - application/json
      description: Authenticates a user by validating the provided email and password.
        Returns a JWT token upon successful login.
      parameters:
      - description: User login credentials payload
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/model.Login'
      produces:
      - application/json
      responses:
        "200":
          description: JWT token response
          schema:
            $ref: '#/definitions/model.LoginResponse'
        "400":
          description: invalid request payload"}
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: invalid credentials"}
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: something went wrong"}
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Authenticate a user and return a JWT token
      tags:
      - Users
  /signup:
    post:
      consumes:
      - application/json
      description: Register a new user with email, password, optional name fields,
        and role. The email must be unique. Passwords must be between 6 and 60 characters.
        Role defaults to "analyst" if not provided.
      parameters:
      - description: User signup payload
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.SignupRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            $ref: '#/definitions/model.SignupResponse'
        "400":
          description: Invalid request or validation failed
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "409":
          description: User with email already exists
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Create a new user account
      tags:
      - Users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
